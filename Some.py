from Sets import bot,k,quiz,anis
from ruls import Test,user_data,resultat,who_i,a
from telebot import types
import urllib.parse




@bot.message_handler(commands=['start'])
def st(ms):

    text1=text1='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å. \n –ú—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, \
—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ  \
–∂–∏–≤–æ—Ç–Ω–æ–µ, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∞. \n –ï—Å–ª–∏ –ø–æ–¥–æ–±–Ω–∞—è \
–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–∞–∫ –Ω–∏–∂–µ'

    mark=types.InlineKeyboardMarkup(row_width=2)
    k1=types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö',callback_data='list')
    k2=types.InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞',callback_data='help')
    k3=types.InlineKeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∞',callback_data='opeka')
    k5=types.InlineKeyboardButton('–¢–µ—Å—Ç –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ',callback_data='game')
    k8=types.InlineKeyboardButton('–°–∞–π—Ç',url='https://moscowzoo.ru/')

    mark.row(k3,k8,).row(k1,k2).add(k5)
    
    bot.send_message(ms.chat.id,text1,reply_markup=mark)

    

@bot.message_handler(commands=['test'])
def games(ms):

    mark=types.InlineKeyboardMarkup()
    k4=types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    k10=types.InlineKeyboardButton('–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', callback_data='bases')
    k13=types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', callback_data='Stariy')

    mark.row(k13,k10)
    mark.add(k4)

    bot.send_message(ms.chat.id, '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Ç–µ—Å—Ç:  –í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ',reply_markup=mark)



@bot.message_handler(commands=['help'])
def hp(ms):

    text2='–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ 1 —è–∑—ã–∫–∞ --–†—É—Å—Å–∫–∏–π \n –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø—Ä–æ—Å–∏–º –≤–≤–æ–¥–∏—Ç—å \
–¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É—è –±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã,—Ü–∏—Ñ—Ä—ã –∏ —á–∏—Å–ª–∞. –í–∞–∂–Ω–æ, –µ—Å–ª–∏ –≤—ã —Ä–µ—à–∏—Ç–µ –ø–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç  \
—Ç–æ –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω,—Ç.–∫ –≤—ã —Ä–µ—à–∏–ª–∏ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å, –ø–µ—Ä–µ–ø—Ä–æ–π–¥—è, –∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–≤. –í–µ—Ä—Å–∏—è 1.0.\n \
–ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É alesharet4253@gmail.com \
–ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–≤ –∞–≤—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É +7(964)515-24-53'

    mark=types.InlineKeyboardMarkup()
    k4=types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    k8=types.InlineKeyboardButton('–°–∞–π—Ç –∑–æ–æ–ø–∞—Ä–∫–∞',url='https://moscowzoo.ru/')

    mark.row(k4,k8)

    bot.send_message(ms.chat.id,text2,reply_markup=mark)



@bot.message_handler(commands=['animals'])
def ls(ms):
    j='\n'.join(k)


    mark=types.InlineKeyboardMarkup()
    k4=types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    k9=types.InlineKeyboardButton('–°—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º',callback_data='st_opeka')

    mark.row(k9,k4)

    bot.send_message(ms.chat.id,f'–î–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –∑–æ–æ–ø–∞—Ä–∫–∞:\n {j}',reply_markup=mark)



@bot.message_handler(commands=['opeka'])
def op(ms):

    text3='–û–ø–µ–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π \
–æ–¥–Ω—É –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º, –ø–æ–º–æ–≥–∞—é—â–∏—Ö –∑–æ–æ–ø–∞—Ä–∫—É –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –µ–≥–æ –æ–±–∏—Ç–∞—Ç–µ–ª—è—Ö. \
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å –ø–æ–º–æ—â—å—é –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π \
–≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∑–æ–æ–ø–∞—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø–ª–∞–Ω–µ—Ç—ã.\
–í–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É –º–æ–∂–Ω–æ —Ä–∞–∑–Ω—ã—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –∑–æ–æ–ø–∞—Ä–∫–∞.\
–£—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ª—é–±–æ–π –Ω–µ—Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–π: –∏ —Ä–µ–±—ë–Ω–æ–∫, \
–∏ –±–æ–ª—å—à–∞—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è.     –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–ø–µ–∫—É–Ω–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –∑–æ–æ–ø–∞—Ä–∫—É —É–ª—É—á—à–∞—Ç—å\n\
—É—Å–ª–æ–≤–∏—è –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏—Ö –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è.\n –ü–æ—á—ë—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ–∫—É–Ω–∞ \
–ø–æ–∑–≤–æ–ª—è–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥ –Ω–∞–≤–µ—â–∞—Ç—å, –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π –µ–≥–æ –∂–∏–∑–Ω–∏ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è.'

    mark=types.InlineKeyboardMarkup()
    k4=types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    k9=types.InlineKeyboardButton('–°—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º',callback_data='st_opeka')
    k1=types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö', callback_data='list')
    k7=types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è o –ø—Ä–æ–≥—Ä–∞–º–ºe –æ–ø–µ–∫–∞', \
                            url='https://moscowzoo.ru/about/guardianship')
    k8=types.InlineKeyboardButton('–°–∞–π—Ç –∑–æ–æ–ø–∞—Ä–∫–∞',url='https://moscowzoo.ru/')

    mark.row(k1,k9)
    mark.add(k7).row(k8,k4)

    bot.send_message(ms.chat.id,text3,reply_markup=mark)



@bot.message_handler(commands=['st_opeka'])
def st_opeka(ms):
        
        text3='–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º, —É–∫–∞–∂–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –∞ –¥–∞–ª–µ–µ –≤–Ω–µ—Å–∏—Ç–µ –≤–∞—à–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–¥ –∑–æ–æ–ø–∞—Ä–∫–∞ \
—Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: \n <–í–∞—à–µ –∂–∏–≤–æ—Ç–Ω–æ–µ> <—Å—É–º–º–∞ –ø–æ–∂–µ—Ç–≤–æ–≤–∞–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö>'

        mark=types.InlineKeyboardMarkup()
        k4=types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')

        mark.add(k4)

        bot.send_message(ms.chat.id,text3,reply_markup=mark)



@bot.message_handler(commands=['share'])
def share(ms):

    # set(resultat)
    if resultat:
        BOT_LINK='https://t.me/TEER_GANGIRSEbot'
        result_text='–£–≥–∞–¥–∞–π—Ç–µ, –∫—Ç–æ —è?'
        share_text = f"{result_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏ –≤—ã: {BOT_LINK}"
        twitter_url = f"https://twitter.com/intent/tweet?text=" + urllib.parse.quote(share_text) 
        vk_url = f"https://vk.com/share.php?url={BOT_LINK}&title="+ urllib.parse.quote(share_text) # type: ignore
        wa_link = "https://wa.me/?text=" + urllib.parse.quote(share_text)
    
        mark = types.InlineKeyboardMarkup()
        k16=types.InlineKeyboardButton("–í–∞—Ç—Å–∞–ø–ø", url=wa_link)
        k14=types.InlineKeyboardButton("Twitter", url=twitter_url)
        k15=types.InlineKeyboardButton("VK", url=vk_url)
        k4=types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')

        mark.row(k16,k15)
        mark.row(k14,k4)
    
        bot.send_message(ms.chat.id, share_text, reply_markup=mark)
    else:
        bot.send_message(ms.chat.id,'–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç üòá')



@bot.message_handler(commands=['Stariy'])
def start_quiz(message):
    chat_id = message.chat.id
    user_data[chat_id] = {'current_q': 0, 'score': 0}
    send_question(chat_id)



@bot.message_handler(func=lambda message: message.chat.id in user_data)
def handle_answer(message):
    chat_id = message.chat.id
    current = user_data[chat_id]['current_q']
    q = quiz[current]

    selected_text = message.text
    for option_text, points in q['options']:
        if option_text == selected_text:
            user_data[chat_id]['score'] += points
            break
    else:

        bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.')
        return

    user_data[chat_id]['current_q'] += 1
    send_question(chat_id)

    

def send_question(chat_id):
    current = user_data[chat_id]['current_q']
    if current < len(quiz):
        q = quiz[current]
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for option_text, _ in q['options']:
            markup.add(option_text)
        bot.send_message(chat_id, q['question'], reply_markup=markup)
    else:
        mark=types.InlineKeyboardMarkup()
        k4=types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back')
        k10=types.InlineKeyboardButton('–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', callback_data='bases')
        k11=types.InlineKeyboardButton('–ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏', callback_data='again')
        k12=types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–æ–º', callback_data='share')

        mark.add(k4)
        mark.row(k10,k11)
        mark.add(k12)

        score = user_data[chat_id]['score']
        resultat.append(user_data[chat_id])
        with open(f'{anis.get(str(score))}','rb') as phot: 
            # print(anis.get(str(score)))
            result=who_i(score)
            bot.send_photo(chat_id,phot, result, reply_markup=mark)
            resultat.append(phot)
            # print(resultat)

@bot.message_handler(commands=['resultats'])
def bs(ms):
    # set(resultat)
    mark=types.InlineKeyboardMarkup()
    k4=types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back')
    mark.add(k4)
    if resultat:
        b=len(resultat)//2
        if b<3: 
            r=[who_i(resultat[j].get('score')).split('.')[0][4:] for j in range(b+1) if j%2==0] # type: ignore
            ra='\n'.join([i for i in list(map(str,r))])
            
        else:
            r=[who_i(resultat[j].get('score')).split('.')[0][4:] for j in range(b+3) if j%2==0] # type: ignore
            ra='\n'.join([i for i in list(map(str,r))])
        bot.send_message(ms.chat.id,f'–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã :\n {ra}',reply_markup=mark) 
    else:
        bot.send_message(ms.chat.id,'–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞',reply_markup=mark)
    
        
        

       

@bot.callback_query_handler(func=lambda call:call.data=='help')

def hp_callback(call):
            bot.delete_message(call.message.chat.id,call.message.message_id -0)
            hp(call.message)



@bot.callback_query_handler(func=lambda call:call.data=='list')
def ls_callback(call):
            bot.delete_message(call.message.chat.id,call.message.message_id -0)
            ls(call.message)



@bot.callback_query_handler(func=lambda call:call.data=='opeka')
def op_callback(call):
            bot.delete_message(call.message.chat.id,call.message.message_id -0)
            op(call.message)



@bot.callback_query_handler(func=lambda call:call.data=='game')
def game_callback(call):
            bot.delete_message(call.message.chat.id,call.message.message_id -0)
            games(call.message)



@bot.callback_query_handler(func=lambda call:call.data=='back')
def back_callback(call):
            bot.delete_message(call.message.chat.id, call.message.message_id-0)
            st(call.message)
            
            
@bot.callback_query_handler(func=lambda call:call.data=='st_opeka')
def st_opeka_callback(call):
            bot.delete_message(call.message.chat.id,call.message.message_id -0)
            st_opeka(call.message)


@bot.callback_query_handler(func=lambda call:call.data=='share')
def share_callback(call):
            
            bot.delete_message(call.message.chat.id,call.message.message_id)
            share(call.message)


@bot.callback_query_handler(func=lambda call:call.data in ['Stariy','again'])
def test_callback(call):
            bot.delete_message(call.message.chat.id,call.message.message_id -0)
            start_quiz(call.message)


@bot.callback_query_handler(func=lambda call:call.data=='bases')

def bases_callback(call):
            bot.delete_message(call.message.chat.id,call.message.message_id -0)
            bs(call.message)

@bot.message_handler(content_types=['text'])
def rn_op(ms):
        a=ms
        val=ms.text.lower()
        Test.check(val,a)


 
bot.polling()
